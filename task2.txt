25.11.2020

Задание

Реализовать файловый вирус, осуществляющий заражение 32-х и 64-х разрядных исполняемых и библиотечных PE-файлов и/или ELF-файлов.
При заражении не должна нарушаться работоспособность файла.
Вся функциональность должна располагаться во внедряемом коде. Не допускается использование дополнительных файлов, программ и библиотек вируса.
Необходимо продемонстрировать всю реализованную функциональность на практике. Для этого найти или создать подходящие файлы.


n - номер студента в списке (ориентироваться на список с оценками). = 3
a=19
b=11

Там, где не сказано отдельно, описание подразумевает оба формата (PE, ELF). Для упрощения описание ведётся в терминах PE-формата (подразумевается, что соответствующие сущности есть в ELF, но с другими именами).

Базовая функциональность (к сдаче не принимаются задания с функциональностью меньше базовой).
20 баллов.
Требования:
1. Реализовать шеллкод, осуществляющий простое внедрение кода в PE- или ELF-файл без нарушения его работоспособности.
Расширить последнюю секцию, добавить ей право на исполнение. В новое место поместить весь шеллкод (никакие данные программы не должны измениться). Перенаправить точку входа на шеллкод. При запуске зараженной программы сначала должен отрабатывать внедрённый код, показывать некоторое сообщение (эмуляция полезной нагрузки) и передавать управление оригинальному коду.
2. Возможность заражения 32-х и 64-х разрядных файлов (после перекомпиляции под нужную разрядность).


Дополнительные задания.
Некоторое дополнительные задания местами не совместимы с базовой функциональностью. Тогда при выборе такого дополнительного задания соответствующий пункт из базовой функциональности не делать, а делать более сложную функциональность из дополнительного (баллы за задание суммируются с баллами за базовую).
Некоторые задания не совместимы между собой.
Для выбора доступны только следующие последовательности дополнительных заданий.
1 -> 2 -> 4
1 -> 2 -> 5
1 -> 3(подзадания 0, 1) -> 6
1 -> 3(подзадания 2, 3) -> 4
1 -> 3(подзадания 2, 3) -> 5
Т.е. сначала можно выбрать только задание 1. После него можно выбрать только задания 2 или 3. После задания 2 можно выбрать (произвольно) только задания 4 или 5. После задания 3 можно выбрать (в завимости от подзадания) только задания 4, 5 или 6.


1. Должен быть предусмотрен механизм самораспространения, т.е. запущенный из заражённой программы внедрённый шеллкод должен внедрять себя в другой исполняемый файл.
Должна быть предусмотрена защита от повторного заражения.
Способы пометить зараженный файл (при заражении в определённые места записывается предопределённая сигнатура):
0) Сигнатура в неиспользуемых полях DOS-заголовка.
1) Сигнатура в DOS-stub.
2) Сигнатура в неиспользуемых полях файлового NT-заголовка.	+
3) Сигнатура в неиспользуемых полях опционального NT-заголовка.
4) Сигнатура в именах секций
5) Сигнатура в неиспользуемой памяти в конце секции.
Необходимо выбрать способ с номером (a*n+b)%6. = 2
До 5 баллов.+


2. Вместо простого внедрения кода из базовой части.
Располагать весь внедряемый шеллкод (единым блоком) по смещению (317*(n+b))%100 от начала секции кода. Оригинальный код, на место которого внедряется шеллкод, необходимо куда-то перенести. Для этого нужно обеспечить новое место в файле. В этом новом месте стоит располагать только переносимые исходные данные файла. Точку входа необходимо переопределить на шеллкод. Шеллкод после выполнения начальной функциональности должен вернуть оригинальный данные назад и передать управление оригинальной точке входа.
Методы выделения дополнительной памяти:
0) Расширить (в файле и в оперативной памяти) последнюю секцию.
1) Добавить новую секцию.
2) Добавить в файл после первой секции дополнительное место (размер никакой секции при этом не меняется), сдвинув все лежащие после данные и поправив соответствующие файловые смещения. Данные из этой памяти можно получить только чтением из файла с диска.
3) Добавить в файл после второй секции дополнительное место (размер никакой секции при этом не меняется), сдвинув все лежащие после данные и поправив соответствующие файловые смещения. Данные из этой памяти можно получить только чтением из файла с диска.
4) Добавить в файл после третьей секции дополнительное место (размер никакой секции при этом не меняется), сдвинув все лежащие после данные и поправив соответствующие файловые смещения. Данные из этой памяти можно получить только чтением из файла с диска.
Необходимо выбрать метод с номером (a*n+b)%5.
До 7 баллов.


3. Вместо простого внедрения кода из базовой части.
Обеспечить место для внедрения шеллкода одним из следующих методов:
0) Расширить первую секцию (должна быть кодовой) вниз по адресам (изменится абсолютный адрес ее начала и увеличится размер). При этом абсолютные адреса всех существующих в программе данных не изменятся, но ImageBase уменьшится. Значит необходимо соответствующим образом поправить все rva-адреса.
1) Расширить первую секцию (должна быть кодовой) вверх по адресам: её абсолютный адрес начала (и ImageBase) не меняется, но увеличивается размер. Соответственно необходимо подвинуть данные после секции. Также необходимо поправить соответствующие относительные и абсолютные адреса. Для правки абсолютных адресов использовать релоки (не заражать файлы, для которых это сделать невозможно).

Следующие пункты обеспечивают дополнительное место без увеличения размера файла (и размера какой-либо секции), сжимая исходные данные программы (в одной или нескольких секциях). Для сжатия можно использовать, например, библиотеку aPLib или функцию RtlCompressBuffer. Если после сжатия освобождается недостаточно места, то не заражать такой файл.
2) Сжимать данные в секции кода (будут сжиматься относительно плохо). В освободившееся после сжатия место поместить шеллкод.
3) Сжимать данные в секции данных (должны хорошо сжиматься). В освободившееся после сжатия место поместить оргинальный код из кодовой секции, который будет заменён шеллкодом.

Необходимо выбрать метод с номером (a*n+b)%4.
До 15 баллов.


4. При размещении шеллкода в файле необходимо так его располагать, чтобы не перетереть метаданные PE-файла, необходимые при загрузке. Наборы таких метаданных:
0) Директории: экспорта, импорта, локальной памяти потоков (TLS), конфигурации загрузки.
1) Директории: релоков, отложенного импорта, отладки, таблица обработки исключений.
2) Информация импорта: массив дескрипторов импорта, имена библиотек, имена функций.
3) Информация импорта: массив дескрипторов импорта, массивы IAT (import address table) и INT (import name table).
4) Релоки: директория релоков, адреса, по которым релоки осуществляют поправки.
5) Директория конфигурации загрузки (IMAGE_LOAD_CONFIG_DIRECTORY), таблица безопасных обработчиков исключений.
6) Директория локальной памяти потоков (TLS), массив адресов callback-функций в директории TLS.
Необходимо выбрать набор с номером (a*n+b)%7. Должны быть проверки только метаданных из выбранного набора.
До 7 баллов.


5. При размещении шеллкода в файле необходимо корректно обрабатывать возможную ситуацию перетирания шеллкодом метаданных PE-файла, нужных для загрузки. При заражении шеллкод должен корректно перетирать (может быть обнулять) или модифицировать (может быть переносить) эти метаданные. А после исполнения шеллкод должен восстанавливать в оперативной памяти все перетёртые данные (в том числе и метаданные) и при необходимости их обрабатывать.
Возможные типы метаданных (и способов их обработки):
0) Импорт. Обнулять директорию импорта. После восстановления оригинальных данных обрабатывать её самостоятельно.
До 15 баллов.
1) Импорт. Переносить всю информацию импорта (директорию, массивы, имена функций и т.д.) в дополнительно выделенную память. Все абсолютные ссылки на элементы таблицы адресов импорта (IAT) находить с помощью релоков (если это невозможно, то не заражать такой файл) и править на новые адреса.
До 25 баллов.
2) Экспорт. Переносить всю информацию экспорта (директорию, массивы, имена функций и т.д.) в дополнительно выделенную память.
До 20 баллов.
3) Релоки. Перенести директорию релоков в дополнительно выделенную память.
До 7 баллов.
4) Релоки. Обнулять директорию релоков. После восстановления оригинальных данных обрабатывать её самостоятельно.
До 12 баллов.

Необходимо выбрать метод с номером (a*(n+b))%5.


6. Поддреживать одновременно (без перекомпиляции) в одном шеллкоде заражение 32-х и 64-х битных версий файлов. Соответственно шеллкод должен уметь работать в 32-х и 64-х битном программном окружении.
До 15 баллов.



Указания и рекомендации.

При заражении происходит модификация данных программы. Если модифицированные данные нужны после инициализации (во время исполнения кода), то внедрённый шеллкод может эти данные восстановить - тогда их модификацию никто не заметит. Если данные нужны системному загрузчику во время инициализации (например, данные для импорта), то их порча приведёт к ошибке загрузки файла. Неконтролируемая модификация таких данных не желательна. Поэтому либо надо находить расположение этих данных и их не затрагивать, либо модифицировать эти данные особым образом.

Шеллкод после выполнения полезной нагрузки должен загрузить реальный код по правильному адресу и передать управление настоящей точке входа (OEP).

Релоки, которые правят данные в секции, в которую внедряется шеллкод, не должны его портить при загрузке. Т.е. либо убирать все релоки, либо только те, которые могут испортить код. Соответственно во время исполнения шеллкода и восстанавления реального содержимого секции необходимо обработать релоки самостоятельно (т.е. убранные релоки необходимо сохранить в какой-то внутренней таблице).
Помимо шеллкода необходимо хранить дополнительные данные о зараженном файле:
- адрес оригинальной точки входа;
- адрес, где сохранены данные секции;
- адрес, где расположены перемещенные данные.
Их можно расположить перед шеллкодом. Соответственно шеллкод должен знать, как до них дотянуться.
Во время запуска зараженной программы (и, соответственно, шеллкода) должно происходить заражение других исполняемых файлов (в текущей директории или в какой-то системной директории). Т.е. новый исполняемый файл должен меняться соответствующим образом и в него должен копироваться шеллкод из текущего.
Файлы не должны заражаться повторно. Для этого зараженный файлы надо как-то помечать (имя секции, определенные значения в неиспользуемых полях заголовков).
Чтобы не вызвать подозрений, файлы не должны заражаться слишком активно.

Первый запуск шеллкода, когда никаких зараженных файлов еще нет, производить с помощью программы execsc2.
Шеллкод отлаживается обычным образом (например, с помощью OllyDbg), начиная с точки входа зараженного файла.



Примеры и шаблоны

lab\11\examples\injpe
Внедрение простого шеллкода за таблицу секций.

lab\11\examples\add_sec
Пример внедрения шеллкода в добавленную секцию.

lab\11\examples\ext_sec
Пример внедрения шеллкода в расширенную последнюю секцию.

lab\12\examples\list_dir_32_64
Пример 64-х битного шеллкода листинга каталогов.

lab\12\examples\virus_sc
Шаблона для шеллкода вируса.

lab\7\tools
Вспомогательные программы для работы с шеллкодами.



Пример кода для определения номеров

n = 1
a = 19
b = 11
for n in range(1,20):
	print 'student ' + str(n)
	print '\textra task1'
	print '\t\tsignature method: ' + str((a*n+b)%6)
	print '\textra task 2'
	print '\t\toffset: ' + str((317*(n+b))%100)
	print '\t\tmethod: ' + str((a*n+b)%5)
	print '\textra task 3'
	print '\t\tmethod: ' + str((a*n+b)%4)
	print '\textra task 4'
	print '\t\tset: ' + str((a*n+b)%7)
	print '\textra task 5'
	print '\t\tmethod: ' + str((a*(n+b))%5)

	

Сжатие в шеллкоде
https://modexp.wordpress.com/2019/12/08/shellcode-compression/
https://github.com/emmanuel-marty/apultra
https://gist.github.com/odzhan/5f60b1104ecaac6cf4c11a2a7fe19a00
https://gist.github.com/odzhan/db2c0583fad3e5b160fcbbf78f7027cc
http://www.ibsensoftware.com/products_aPLib.html

PE-файлы
http://cs.usu.edu.ru/docs/pe/
https://wasm.in/blogs/tls-iznutri.453/

O'Neill "Learning Linux Binary Analysis"
